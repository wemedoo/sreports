@using sReportsV2.DTOs.Field.DataOut;
@model FieldFileDataOut
@{
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
}



<fieldset id="@fieldSetId-@fieldSetCounter-@((Model as FieldDataOut).Id)-1" class="form-element form-input position-relative field-set-content" @Html.Raw(Model.Visibility)>

    <div class="repetitive-values d-inline-block form-input-size">
        <div class="field-group">
            <div for="@Model.Id" class="filter-label form-label-size d-inline-block">
                @Html.Raw(Model.FullLabel)
            </div>
            <div class="repetitive-field d-inline-block">
                <div class="filter-input  file-field w-100">
                    @if (Model.IsReadonly || isChapterReadonly)
                    {
                        <input type="file"
                               class="form-element-field file"
                               data-id="field-@fieldSetId-@fieldSetCounter-@Model.Id-1"
                               placeholder="@Model.DescriptionLabel"
                               disabled
                               name="@fieldSetId-@fieldSetCounter-@Model.Id-1" />

                        <input type="hidden"
                               class="form-element-field file-hid"
                               data-id="field-@fieldSetId-@fieldSetCounter-@Model.Id-1"
                               placeholder="@Model.DescriptionLabel"
                               readonly
                               name="@fieldSetId-@fieldSetCounter-@Model.Id-1" />
                    }
                    else
                    {
                        <input type="file"
                               class="form-element-field file"
                               data-id="field-@fieldSetId-@fieldSetCounter-@Model.Id-1"
                               placeholder="@Model.DescriptionLabel"
                               name="@fieldSetId-@fieldSetCounter-@Model.Id-1" />

                        <input type="hidden"
                               class="file-hid"
                               id="field-@fieldSetId-@fieldSetCounter-@Model.Id-1"
                               name="@fieldSetId-@fieldSetCounter-@Model.Id-1"
                               placeholder="@Model.DescriptionLabel"
                               value="@(Model.Value != null && Model.Value.Count > 0 && !string.IsNullOrEmpty(Model.Value[0]) ? Model.Value[0] :"")" />
                    }
                    <div class="file-choose">
                        <div>Browse file</div>
                        <img src="~/Content/img/icons/browse.svg" class="ml-auto" style="width:20px;">
                    </div>
                </div>

                <div class="file-name-div" style="display:@(Model.Value != null && Model.Value.Count > 0 ? "" : "none")">
                    <i class="fas fa-check file-check"></i>

                    <div class="file-name-text" onclick="downloadImage(event,'@(Model.Value != null && Model.Value.Count > 0 ? Model.Value[0] : "")')">
                        @HttpUtility.UrlDecode((Model.Value != null && Model.Value.Count > 0 ?  Model.Value[0].Split('/').Last() : ""))
                    </div>
                    <a class="remove-predefined ml-auto file-remove" onclick="removeFile(event)"></a>

                </div>

            </div>
            @Html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", Model)
        </div>

    </div>
    <div style="margin-top:10px;">
        <div style="display:none" class="form-element-description field-desc">
            @Html.Raw(Model.Description)
        </div>
    </div>
</fieldset>
