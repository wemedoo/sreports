@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.DTOs.Form.DataOut;
@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Enums;
@using sReportsV2.Common.Extensions;

@model FormDataOut
@{
    var controller = ViewContext.Controller as sReportsV2.Controllers.FormCommonController;
    var userCookieData = ViewBag.UserCookieData;
    bool readOnlyPermission = ((bool?)ViewBag.ReadOnly).GetValueOrDefault();
    bool activeFormState = !Model.FormState.HasValue || Model.FormState.Equals(FormState.OnGoing);
    bool readOnlyMode = readOnlyPermission || !activeFormState;
    bool isEngineModule = ViewBag.Action == "/FormInstance/Create";
    bool isEdit = ViewBag.FormInstanceId != null;
    bool canSignDocument = userCookieData != null
        && userCookieData.UserHasPermission(PermissionNames.SignFormInstance, ModuleNames.Engine)
        && userCookieData.UserHasPermission(PermissionNames.ChangeFormInstanceState, ModuleNames.Engine)
        && isEngineModule && isEdit && !Model.FormState.Equals(FormState.Signed);
}
<form id="fid" method="post" action="@ViewBag.Action" novalidate onsubmit="return clickedSubmit(event);">
    <input type="hidden" name="formDefinitionId" value="@Model.Id" />
    <input type="hidden" name="thesaurusId" value="@Model.ThesaurusId" />
    <input type="hidden" name="language" value="@Model.Language" />

    @if (ViewBag.FilterFormInstanceDataIn != null)
    {
        <input type="hidden" name="DocumentClass" value="@ViewBag.FilterFormInstanceDataIn.DocumentClass" />
        <input type="hidden" name="GeneralPurpose" value="@ViewBag.FilterFormInstanceDataIn.GeneralPurpose" />
        <input type="hidden" name="ExplicitPurpose" value="@ViewBag.FilterFormInstanceDataIn.ExplicitPurpose" />
        <input type="hidden" name="ScopeOfValidity" value="@ViewBag.FilterFormInstanceDataIn.ScopeOfValidity" />
        <input type="hidden" name="ClinicalDomain" value="@ViewBag.FilterFormInstanceDataIn.ClinicalDomain" />
        <input type="hidden" name="ClinicalContext" value="@ViewBag.FilterFormInstanceDataIn.ClinicalContext" />
        <input type="hidden" name="AdministrativeContext" value="@ViewBag.FilterFormInstanceDataIn.AdministrativeContext" />
        <input type="hidden" name="ClassesOtherValue" value="@ViewBag.FilterFormInstanceDataIn.ClassesOtherValue" />
        <input type="hidden" name="FollowUp" value="@ViewBag.FilterFormInstanceDataIn.FollowUp" />
        <input type="hidden" name="VersionId" value="@ViewBag.FilterFormInstanceDataIn.VersionId" />

    }

    @if (ViewBag.VersionId != null)
    {
        <input type="hidden" name="EditVersionId" value="@ViewBag.VersionId" />
    }

    <input type="hidden" name="LastUpdate" value="@(ViewBag.LastUpdate != null? ViewBag.LastUpdate.ToString("o") : null) " />


    @if (ViewBag.FormInstanceId != null && !string.IsNullOrEmpty(ViewBag.FormInstanceId.ToString()))
    {
        <input type="hidden" name="formInstanceId" value="@ViewBag.FormInstanceId" />
    }
    @if (ViewBag.EncounterId != null && !string.IsNullOrEmpty(ViewBag.EncounterId.ToString()))
    {
        <input type="hidden" name="encounterId" value="@ViewBag.EncounterId" />
    }

    @if (ViewBag.Referrals != null)
    {
        foreach (var referral in ViewBag.Referrals)
        {
            <input type="hidden" name="referrals" value="@referral" />
        }
    }

    <div class="d-flex">
        <div id="chapters" class="chapters-ul mr-3 sticky" style="display:@(isEngineModule ? "" : "none")">
            @foreach (FormChapterDataOut c in Model.Chapters)
            {
                int counter = 0;
                <div id="@c.Id-li" class="chapter-li @(c.Id == Model.Chapters[0].Id ? "active" : "") " data-id="@c.Id">
                    <i class="fas fa-angle-right mr-3"></i>@c.Title
                </div>
            }
            @if (userCookieData != null && userCookieData.UserHasPermission(PermissionNames.ViewAdministrativeData, ModuleNames.Designer))
            {
                <div id="administrativeChapter-li" class="chapter-li">
                    <i class="fas fa-angle-right mr-3"></i>@sReportsV2.Resources.TextLanguage.Administative_data
                </div>
            }
            @if (ViewBag.Referrals != null)
            {
                <div id="referralChapter-li" class="chapter-li">
                    <i class="fas fa-angle-right mr-3"></i>Summary data
                </div>
            }

        </div>
        <div class="@(isEngineModule ? "w-75" : "w-100") chapters-container">
            <div class="box-shadow">
                @foreach (FormChapterDataOut c in Model.Chapters)
                {
                    bool isChapterReadonly = (ViewBag.formInstanceId != null && !string.IsNullOrEmpty(ViewBag.formInstanceId.ToString()) && c.IsReadonly);
                    isChapterReadonly = Model.FormState != null && Model.FormState.Equals(FormState.Finished.ToString()) ? true : isChapterReadonly;
                    <div class="des-container form-accordion @(isEngineModule ? "hide-arrow" : "")" style="display:@(isEngineModule && c.Id != Model.Chapters[0].Id ? "none" : "block");margin-bottom:@(isEngineModule ? "" : "15px");" id="@c.Id-acc">
                        <div class="form-accordion-header color-green-primary position-relative " data-toggle="collapse" onclick="collapseChapter(this)" data-target="#@c.Id" aria-expanded="false" aria-controls="@c.Id">
                            <img class="mr-2" style="margin-bottom:3px;" src="~/Content/img/icons/chapter.svg">@c.Title
                            <div class="chapter-des designer-description des color-white">
                                @if (!string.IsNullOrEmpty(c.Description) && !c.Description.Equals(c.Title))
                                {
                                    <i class="ml-1 fas fa-info-circle"></i>
                                }
                            </div>
                        </div>
                        <div class="collapse chapter" id="@c.Id">
                            <div class="card">
                                @if (!string.IsNullOrEmpty(c.Description) && !c.Description.Equals(c.Title))
                                {
                                    <div class='chapter-description desc position-relative' style="display:none;">@Html.Raw(c.Description)<img src="~/Content/img/icons/Administration_remove.svg" class="x-des"></div>
                                }
                                @if (c.Pages.Count > 1)
                                {
                                    <span class="arrow-scroll-left-page"></span>
                                    <span class="arrow-scroll-right-page"></span>
                                    <div class="page-selector pages-links d-flex" style="overflow-x:hidden" id="arrowRight-chapter-@c.Id">
                                        @{ int counter = 0;}
                                        @foreach (FormPageDataOut p in c.Pages)
                                        {
                                            { counter++; }
                                            <div class="pages-link @(counter == 1 ? "active" : "")" onclick="showPageById('@p.Id', event)">@p.Title</div>
                                        }
                                    </div>
                                }
                                <div class='card-body' style="padding:unset;">
                                    @foreach (FormPageDataOut p in c.Pages)
                                    {
                                        <div class='page des-container' id='@p.Id'>
                                            @if (!string.IsNullOrEmpty(p.Title) && p.IsVisible)
                                            {
                                                <div class="page-header position-relative">
                                                    @p.Title
                                                    <div class="page-des des">
                                                        <u>
                                                            @if (!string.IsNullOrEmpty(p.Description) && !c.Description.Equals(p.Title))
                                                            {
                                                                @sReportsV2.Resources.TextLanguage.Description

                                                            }
                                                        </u>
                                                        <i class="ml-1 fas fa-info-circle"></i>
                                                    </div>
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(p.Description) && p.IsVisible)
                                            {
                                                <div class='page-description desc position-relative' style="display:none;">@Html.Raw(p.Description)<img src="~/Content/img/icons/Administration_remove.svg" class="x-des"></div>

                                            }

                                            <div class="row @(p.ImageMap != null ? "image-map" : "")">
                                                @Html.Partial("~/Views/Form/DragAndDrop/ImageMapPreview.cshtml", p)
                                                <div class="@(p.ImageMap != null ? "col-md-12 col-lg-6 " : " col-md-12 col-lg-12")">

                                                    <div class="row">

                                                        @for (int i = 0; i < p.ListOfFieldSets.Count; i++)
                                                        {

                                                            List<FormFieldSetDataOut> ListFs = p.ListOfFieldSets[i];

                                                            <div class="col-12">
                                                                <fieldset class='form-fieldset @*col-md-12 col-lg-6*@ w-100' id="@ListFs[0].Id" page-id='@p.Id' data-map-area="@ListFs[0].MapAreaId" @Html.Disabled(readOnlyMode)>
                                                                    <div class="field-set-container">
                                                                        @{int repetitiveFieldSetCounter = 0;}

                                                                        @for (int j = 0; j < ListFs.Count; j++)
                                                                        {

                                                                            FormFieldSetDataOut fs = ListFs[j];
                                                                            bool isLastField = i == p.ListOfFieldSets.Count - 1 && j == ListFs.Count - 1 && !(i == 0 && j == 0);
                                                                            bool isLastRepetitiveFieldSet = j == ListFs.Count - 1;
                                                                            <div class="field-set field-set-border des-container @(isLastField ? "last-field-set-border" : "") " name="@repetitiveFieldSetCounter">
                                                                                <div class="d-flex justify-content-between field-set-content">
                                                                                    @if (!string.IsNullOrEmpty(fs.Label))
                                                                                    {
                                                                                        <h3 class="field-set-title d-flex">
                                                                                            <img class="field-set-img" src="~/Content/img/icons/field_set.svg">
                                                                                            <div>
                                                                                                @if (fs.IsBold)
                                                                                                {
                                                                                                    <b>@fs.Label</b>
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    @fs.Label
                                                                                                }
                                                                                            </div>
                                                                                        </h3>
                                                                                    }
                                                                                    @if (!string.IsNullOrWhiteSpace(fs.Description))
                                                                                    {
                                                                                        <div class="field-set-des des">
                                                                                            <i class="ml-1 fas fa-info-circle"></i>
                                                                                        </div>
                                                                                    }
                                                                                    <div class="fieldset-repetitive d-flex">
                                                                                        @if (fs.Help != null)
                                                                                        {
                                                                                            <a class="notes-btn" onclick="showHelpModal(@Newtonsoft.Json.JsonConvert.SerializeObject(fs.Help, Newtonsoft.Json.Formatting.Indented))"><span class="filter-element filter-element-radius"><img class="notes-svg-size" src="~/Content/img/icons/notes_button.svg">@sReportsV2.Resources.TextLanguage.Notes@*(@(fs.Help.Title))*@</span></a>
                                                                                        }
                                                                                        @if (ListFs[0].IsRepetitive)
                                                                                        {
                                                                                            <div class="" style="font-size:12px; margin-right:10px; display:@(isLastRepetitiveFieldSet ? "block" : "none")">
                                                                                                <button type="button" class="btn btn-add-new button-fieldset-repetitive"> <i class="fas fa-plus-circle"></i> @sReportsV2.Resources.TextLanguage.AddNew</button>
                                                                                            </div>

                                                                                        }
                                                                                    </div>


                                                                                    @if (fs.IsRepetitive)
                                                                                    {
                                                                                        <div>

                                                                                            @if (ListFs.Count == 1)
                                                                                            {
                                                                                                <button type="button" class="btn remove-field-set float-right btn-remove" style="display:none">
                                                                                                    <img class="remove-repetitive-icon" src="~/Content/img/icons/remove_button.svg">@sReportsV2.Resources.TextLanguage.Remove
                                                                                                </button>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <button type="button" class="btn remove-field-set float-right btn-remove">
                                                                                                    <img class="remove-repetitive-icon " src="~/Content/img/icons/remove_button.svg">@sReportsV2.Resources.TextLanguage.Remove
                                                                                                </button>
                                                                                            }

                                                                                        </div>
                                                                                    }

                                                                                </div>

                                                                                @if (!string.IsNullOrEmpty(fs.Description))
                                                                                {
                                                                                    <div class="fieldset-description desc position-relative" style="display:none">@fs.Description <img src="~/Content/img/icons/Administration_remove.svg" class="x-des"></div>
                                                                                }

                                                                                <div style="padding-top: 6px;"></div>
                                                                                @foreach (FieldDataOut field in fs.Fields)
                                                                                {
                                                                                    field.IsDisabled = readOnlyMode;
                                                                                    @Html.Raw(controller.RenderPartialViewToString(field.PartialView, field, isChapterReadonly, repetitiveFieldSetCounter, ListFs[0].Id))
                                                                                }

                                                                            </div>

                                                                            repetitiveFieldSetCounter++;

                                                                        }
                                                                    </div>

                                                                </fieldset>
                                                            </div>

                                                        }
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (Model.ReferrableFields != null && Model.ReferrableFields.Count > 0)
                {
                    <div>
                        @Html.Partial("~/Views/DiagnosticReport/ReferrableFields.cshtml", Model.ReferrableFields)
                    </div>
                }
                @Html.Partial("~/Views/FormInstance/AdministrativeData.cshtml", Model, new ViewDataDictionary(ViewData) { { "readOnlyMode", readOnlyMode }, { "isEngineModule", isEngineModule } })
            </div>
            <div class="form-instance-button-container">
                @if (canSignDocument)
                {
                    <button class="btn btn-filter-primary" style="height:unset;" onclick="showSignDocumentModal(event, '@FormState.Signed')">@sReportsV2.Resources.TextLanguage.LockDocument</button>
                }
                @if (!readOnlyMode)
                {
                    <input type="submit" data-no-color-change="true" class="btn btn-filter-primary float-right" style="height:unset;" id='submitBtn' value="@(ViewBag.FormInstanceId != null ? sReportsV2.Resources.TextLanguage.Save : sReportsV2.Resources.TextLanguage.Create)" />
                }
            </div>
        </div>
    </div>
</form>
@Html.Partial("~/Views/FormInstance/SignDocumentModal.cshtml")
<div class="modal fade" id="helpModal" tabindex="-1" role="dialog" aria-labelledby="helpModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="helpModalTitle"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="helpModalBody">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@Scripts.RenderFormat("<script type=\"text/javascript\" src=\"{0}?v=" + System.Reflection.Assembly.GetAssembly(typeof(sReportsV2.MvcApplication)).GetName().Version.ToString() + "\"></script>", "~/bundles/formPartial")
@Scripts.RenderFormat("<script type=\"text/javascript\" src=\"{0}?v=" + System.Reflection.Assembly.GetAssembly(typeof(sReportsV2.MvcApplication)).GetName().Version.ToString() + "\"></script>", "~/Scripts/sReports/datetimepicker.js")