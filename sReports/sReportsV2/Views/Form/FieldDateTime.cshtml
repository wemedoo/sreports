@using System.Web.Mvc.Html;
@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;

@model FieldDatetimeDataOut
@{
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
}

<fieldset id="@fieldSetId-@fieldSetCounter-@Model.Id-1" data-dependables="@Model.IsVisible" class="form-element form-input position-relative field-set-content" @Html.Raw(Model.Visibility) @Html.Disabled(Model.IsDisabled) @Html.Raw(Model.IsRequiredDataAttr)>
    <div class="repetitive-values  d-inline-block form-input-size">
        @AddField(Html, Model, isChapterReadonly, fieldSetId, fieldSetCounter, additionalFieldClass: "field-group-date-time")
    </div>
    @Html.Partial("~/Views/Form/FormFieldDescription.cshtml", Model)
</fieldset>

@*
    ---------------------------------------------------------------------------------------------------
                                        Temporarily - Hotfix
    ---------------------------------------------------------------------------------------------------
*@
@helper AddField(System.Web.Mvc.HtmlHelper html, FieldStringDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, string additionalFieldClass = "", string additionalInputClass = "")
{
    if (objectModel.HasValue())
    {
        for (int i = 0; i < objectModel.Value.Count; i++)
        {
            @AddField(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, i + 1, objectModel.Value[i], objectModel.IsRepetitive, additionalFieldClass, additionalInputClass)
        }
    }
    else
    {
        @AddField(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, 1, "", objectModel.IsRepetitive, additionalFieldClass, additionalInputClass)
    }
}

@helper AddField(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive, string additionalFieldClass, string additionalInputClass, string customLabel = "")
{
    <div class="field-group @additionalFieldClass">
        <div for="@objectModel.Id" class="filter-label form-label-size d-inline-block">
            @if (string.IsNullOrEmpty(customLabel))
            {
                @html.Raw(objectModel.FullLabel)
            }
            else
            {
                @customLabel
            }
        </div>
        <div class="repetitive-field filter-input d-inline-block @additionalInputClass">
            @AddInput(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, isRepetitive)
        </div>
        @html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", objectModel, new System.Web.Mvc.ViewDataDictionary(html.ViewData) { { "repetitiveCounter", repetitiveCounter }, { "repetitiveValue", repetitiveValue } })
    </div>
}

@helper AddInput(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive)
{
    bool isSpecialValue = repetitiveValue.IsSpecialValue();
    repetitiveValue = repetitiveValue.ResetIfSpecialValue();
    @AddDateTimeInput(html, objectModel as FieldDatetimeDataOut, isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, isRepetitive, isSpecialValue)
}

@helper AddDateTimeInput(System.Web.Mvc.HtmlHelper html, FieldDatetimeDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive, bool isSpecialValue)
{
    var date = repetitiveValue.RenderDate();
    var time = repetitiveValue.RenderTime();
    <div class="row date-time-row datetime-picker-container">
        <div class="date-wrapper input-border mr-auto w-60 d-flex">
            @Html.Partial("~/Views/Shared/DateInput.cshtml", new sReportsV2.DTOs.Common.DateInputDTO()
            {
                InputAttributes = new Dictionary<object, object> {
                    { "class", "date-helper d-inline-block border-0 date-width field-date-input" },
                    { "data-parent-field", ".datetime-picker-container" },
                    { "id", string.Format("date-field-id-{0}-{1}-{2}-{3}", fieldSetId, fieldSetCounter, objectModel.Id, repetitiveCounter) },
                    { "name", string.Format("{0}-{1}-{2}-{3}", fieldSetId, fieldSetCounter, objectModel.Id, repetitiveCounter) },
                    { "value", @date },
                    { @html.Raw(objectModel.ValidationAttr), null }
                }
            })
            <input type="text" class="date-time-local d-none form-element-field" name="@fieldSetId-@fieldSetCounter-@objectModel.Id-@repetitiveCounter" @html.Raw(objectModel.ValidationAttr) value="@objectModel.RenderDateTime(date, time)" @html.ReadOnly(objectModel.IsReadonly || isChapterReadonly) />
            <div class="field-date-btn img-wrapper @(isSpecialValue ? "pe-none" : "")">
                <img class=" d-inline-block" src="~/Content/img/icons/datetime_field.svg" @html.DateTimeDisabled(objectModel.IsDisabled)>
            </div>
        </div>
        <div class="time-wrapper w-35 input-border">
            <input 
                   type="text" 
                   placeholder="@DateConstants.TimeFormatDisplay" 
                   name="@fieldSetId-@fieldSetCounter-@objectModel.Id-@repetitiveCounter" 
                   id="time-field-id-@fieldSetId-@fieldSetCounter-@objectModel.Id-@repetitiveCounter" 
                   class="time-part time-helper d-inline-block border-0 field-time-input" 
                   value="@time" 
                   style="width:90%;" 
                   data-parent-field=".datetime-picker-container"
                   @html.ReadOnly(isSpecialValue)
                   />
            <div class="field-time-btn clock-wrapper @(isSpecialValue ? "pe-none" : "")">
                <i class="fas fa-clock" @html.TimeDisabled(objectModel.IsDisabled)></i>
            </div>
        </div>
    </div>
}