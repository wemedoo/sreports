@using sReportsV2.Common.Extensions;
@using sReportsV2.DTOs.Field.DataOut.Custom;
@using sReportsV2.DTOs.Field.DataOut.Custom.Action;

@model CustomFieldButtonDataOut

@{
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
}

<fieldset id="@fieldSetId-@fieldSetCounter-@Model.Id-1" data-dependables="@Model.IsVisible" class="form-element form-input position-relative field-set-content" @Html.Raw(Model.IsRequiredDataAttr)>
    <div class="repetitive-values d-inline-block form-input-size">
        @AddField(Html, Model, isChapterReadonly, fieldSetId, fieldSetCounter, 0, "", false, "", "", customLabel: "Call to action:")
    </div>
    @Html.Partial("~/Views/Form/FormFieldDescription.cshtml", Model)
</fieldset>

<script>
    $(document).on('click', '#@Model.Id', function (e) {
            @if (Model.CustomAction is ControllerActionDataOut)
            {
                <text>
            let action = $('#fid').attr('action');
        let splitted = action.split('/');
        let actionAndQuery = splitted[2].split('?');
        actionAndQuery[0] = '@((Model.CustomAction as ControllerActionDataOut).ActionName)';
        splitted[2] = actionAndQuery.join('?')
            splitted[1] = '@((Model.CustomAction as ControllerActionDataOut).ControllerName)';
        $('#fid').attr('action', `${splitted.join('/')}`);
        console.log($('#fid').attr('action'))
                    $('#fid').submit();
                </text>
                }
                else
                {
                <text>@((Model.CustomAction as JavascriptActionDataOut).MethodName)()</text>
                }
    })
</script>

@using System.Web.Mvc.Html;
@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;

@*
    ---------------------------------------------------------------------------------------------------
                                        Temporarily - Hotfix
    ---------------------------------------------------------------------------------------------------
*@

@helper AddField(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive, string additionalFieldClass, string additionalInputClass, string customLabel = "")
{
    <div class="field-group @additionalFieldClass">
        <div for="@objectModel.Id" class="filter-label form-label-size d-inline-block">
            @if (string.IsNullOrEmpty(customLabel))
            {
                @html.Raw(objectModel.FullLabel)
            }
            else
            {
                @customLabel
            }
        </div>
        <div class="repetitive-field filter-input d-inline-block @additionalInputClass">
            @AddInput(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, isRepetitive)
        </div>
        @html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", objectModel, new System.Web.Mvc.ViewDataDictionary(html.ViewData) { { "repetitiveCounter", repetitiveCounter }, { "repetitiveValue", repetitiveValue } })
    </div>
}

@helper AddInput(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive)
{
    bool isSpecialValue = repetitiveValue.IsSpecialValue();
    repetitiveValue = repetitiveValue.ResetIfSpecialValue();
    @AddCustomButtonInput(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, isRepetitive)
}

@helper AddCustomButtonInput(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive)
{
    <button name="@fieldSetId-@fieldSetCounter-@objectModel.Id-@repetitiveCounter" id="@objectModel.Id" type="button" class="btn custom-button btn-filter-primary" @html.Disabled(objectModel.IsDisabled)>@objectModel.Label</button>
}