@using sReportsV2.DTOs.Form.DataOut;
@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.Common.Extensions;
@model FieldCheckboxDataOut
@{
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
}

<div id="@fieldSetId-@fieldSetCounter-@Model.Id-1" data-dependables="@Model.IsVisible" class="form-element form-checkbox form-checkbox-inline field-set-content" @Html.Raw(Model.Visibility)>
    <div class="form-checkbox-legend" title="@Model.DescriptionLabel">
        @Html.Raw(Model.FullLabel)
        @if (Model.Help != null)
        {
            <a class="help-button" onclick="showHelpModal(@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Help, Newtonsoft.Json.Formatting.Indented))">(<span>@(Model.Help.Title)</span>)</a>
        }
    </div>

    @foreach (FormFieldValueDataOut ffv in Model.Values)
    {
        <label class="form-checkbox-label">

            @AddCheckBox(Model.Value != null && Model.Value.Count > 0 && Model.Value[0].Contains(ffv.Value) , Model.IsReadonly || isChapterReadonly , ffv, fieldSetId, fieldSetCounter)

            <i class="form-checkbox-button"></i>
            <span>@ffv.Label</span>
        </label>
        <br />
    }
</div>

<div class="form-element-description">
    @Html.Raw(Model.Description)
</div>

<script>
    $(document).ready(function () {
             fieldSetIdentificator = @fieldSetCounter;

            @foreach (FormFieldDependableDataOut ffd in @Model.Dependables)
            {
            @: if ($(`#@Model.Id-${fieldSetIdentificator}-@ffd.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).is(':checked')) {
                   @ShowDependables(ffd, fieldSetId);
            @:    $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).show();
            @: }
            }
    });

    $(document).on("change", 'input[name^="@fieldSetId-"][name*="@Model.Id"]', function () {
        console.log($(this).attr("id"));
            fieldSetIdentificator = $(this).attr("id").split('-')[1];
            @foreach (FormFieldDependableDataOut ffd in @Model.Dependables)
            {
                @: if (!$(`#@Model.Id-${fieldSetIdentificator}-@ffd.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).is(':checked')) {
                      @HideDependables(ffd,  fieldSetId);
                @:    $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).hide();
                @: }

            }

            @foreach (FormFieldDependableDataOut ffd in @Model.Dependables)
            {
            @: if ($(`#@Model.Id-${fieldSetIdentificator}-@ffd.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).is(':checked')) {
                   @ShowDependables(ffd, fieldSetId);
            @:    $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).show();
            @: }
            }
    });

@helper ShowDependables(FormFieldDependableDataOut ffd, string fieldSetId)
{

    foreach (FormFieldDependableDataOut ffddo in ffd.Dependables)
    {
        if (ffd.Dependables != null && ffd.Dependables.Count() > 0)
        {
            <text>
            if ($(`#@ffd.ActionParams-${fieldSetIdentificator}-@ffddo.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).is(':checked')) {
                $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).show();
            }
            </text>
            @ShowDependables(ffddo, fieldSetId);
        }
    }
}
@helper HideDependables(FormFieldDependableDataOut ffd, string fieldSetId)
{
    foreach (FormFieldDependableDataOut ffddo in ffd.Dependables)
    {
        if (ffd.Dependables != null && ffd.Dependables.Count() > 0)
        {
            <text>
                $(`#@fieldSetId-${fieldSetIdentificator}-@ffddo.ActionParams-1`).hide();
                $(`#@ffd.ActionParams-${fieldSetIdentificator}-@ffddo.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).prop('checked', false);
            </text>
            @HideDependables(ffddo, fieldSetId);
        }
    }
}
@helper AddCheckBox(bool isChecked, bool isReadonly, FormFieldValueDataOut ffv, string fieldSetId, int fieldSetCounter)
{
  <input name="@fieldSetId-@fieldSetCounter-@Model.Id-1" @Model.ValidationAttr
        value="@ffv.Value"
        id="@Model.Id-@fieldSetCounter-@ffv.Value.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()"
        @(isChecked ? "checked": "") 
        class="form-checkbox-field"
        type="checkbox"
        data-numericvalue="@ffv.NumericValue"
        onclick="return @((!isReadonly).ToString().ToLower())"    />
}
</script>