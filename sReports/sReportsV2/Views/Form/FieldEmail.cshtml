@using sReportsV2.DTOs.Field.DataOut;
@model FieldEmailDataOut
@{
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
}

<fieldset id="@fieldSetId-@fieldSetCounter-@Model.Id-1" data-dependables="@Model.IsVisible" class="form-element form-input position-relative field-set-content" @Html.Raw(Model.Visibility)>

    <div class="repetitive-values d-inline-block form-input-size">

        @AddField(isChapterReadonly, fieldSetId, fieldSetCounter)

    </div>
    <div style="margin-top:10px;">
        <div style="display:none" class="form-element-description field-desc">
            @Html.Raw(Model.Description)
        </div>
    </div>
</fieldset>

@helper AddField(bool isChapterReadonly, string fieldSetId, int fieldSetCounter)
{
    if (Model.Value != null && Model.Value.Count > 0)
    {
        int repetitiveCounter = 1;

        foreach (var repetitiveValue in Model.Value)
        {
            <div class="field-group">
                <div for="@Model.Id" class="filter-label form-label-size d-inline-block">
                    @Html.Raw(Model.FullLabel)
                </div>
                <div class="repetitive-field filter-input d-inline-block">
                    @AddInput(isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, Model.IsRepetitive)
                    @{repetitiveCounter++;}
                </div>
                @Html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", Model)
            </div>

        }
    }
    else
    {
        <div class=" field-group">
            <div for="@Model.Id" class="filter-label form-label-size d-inline-block">
                @Html.Raw(Model.FullLabel)
            </div>
            <div class="repetitive-field filter-input d-inline-block">
                @AddInput(isChapterReadonly, fieldSetId, fieldSetCounter, 1, "", Model.IsRepetitive)
            </div>
            @Html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", Model)
        </div>

    }
}

@helper AddInput(bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetititve)
{
    <input type="email" class="form-element-field @(isRepetititve ? "text" : "") email" name="@fieldSetId-@fieldSetCounter-@Model.Id-@repetitiveCounter" placeholder="example@gmail.com" @Html.Raw(Model.ValidationAttr) value="@repetitiveValue" @(Model.IsReadonly || isChapterReadonly ? "readonly" : "") />
}

@helper AddRemoveButton(string display)
{
    <div>
        <button type="button" class="btn btn-primary remove-repetitive" style="display:@display">
            <i class="fas fa-minus-circle"></i>
        </button>
    </div>
}