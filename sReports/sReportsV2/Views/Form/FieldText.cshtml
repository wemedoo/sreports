@using System.Web.Mvc.Html;
@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;

@model FieldTextDataOut
@{
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
}

<fieldset id="@fieldSetId-@fieldSetCounter-@Model.Id-1" data-dependables="@Model.IsVisible" class="form-element form-input position-relative field-set-content" @Html.Raw(Model.IsRequiredDataAttr)>
    <div class="repetitive-values d-inline-block form-input-size">
        @AddField(Html, Model, isChapterReadonly, fieldSetId, fieldSetCounter)
    </div>
    @Html.Partial("~/Views/Form/FormFieldDescription.cshtml", Model)
</fieldset>

@*
    ---------------------------------------------------------------------------------------------------
                                        Temporarily - Hotfix
    ---------------------------------------------------------------------------------------------------
*@
@helper AddField(System.Web.Mvc.HtmlHelper html, FieldStringDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, string additionalFieldClass = "", string additionalInputClass = "")
{
    if (objectModel.HasValue())
    {
        for (int i = 0; i < objectModel.Value.Count; i++)
        {
            @AddField(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, i + 1, objectModel.Value[i], objectModel.IsRepetitive, additionalFieldClass, additionalInputClass)
        }
    }
    else
    {
        @AddField(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, 1, "", objectModel.IsRepetitive, additionalFieldClass, additionalInputClass)
    }
}

@helper AddField(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive, string additionalFieldClass, string additionalInputClass, string customLabel = "")
{
    <div class="field-group @additionalFieldClass">
        <div for="@objectModel.Id" class="filter-label form-label-size d-inline-block">
            @if (string.IsNullOrEmpty(customLabel))
            {
                @html.Raw(objectModel.FullLabel)
            }
            else
            {
                @customLabel
            }
        </div>
        <div class="repetitive-field filter-input d-inline-block @additionalInputClass">
            @AddInput(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, isRepetitive)
        </div>
        @html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", objectModel, new System.Web.Mvc.ViewDataDictionary(html.ViewData) { { "repetitiveCounter", repetitiveCounter }, { "repetitiveValue", repetitiveValue } })
    </div>
}

@helper AddInput(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive)
{
    bool isSpecialValue = repetitiveValue.IsSpecialValue();
    repetitiveValue = repetitiveValue.ResetIfSpecialValue();
    @AddTextInput(html, objectModel, isChapterReadonly, fieldSetId, fieldSetCounter, repetitiveCounter, repetitiveValue, isRepetitive, isSpecialValue);
}

@helper AddTextInput(System.Web.Mvc.HtmlHelper html, FieldDataOut objectModel, bool isChapterReadonly, string fieldSetId, int fieldSetCounter, int repetitiveCounter, string repetitiveValue, bool isRepetitive, bool isSpecialValue)
{
    <input type="text" class="form-element-field @(isRepetitive ? "text" : "")" name="@fieldSetId-@fieldSetCounter-@objectModel.Id-@repetitiveCounter" placeholder="@objectModel.DescriptionLabel" @html.Raw(objectModel.ValidationAttr) value="@repetitiveValue" @html.ReadOnly(objectModel.IsReadonly || isChapterReadonly || isSpecialValue) />
}