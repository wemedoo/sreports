@using sReportsV2.DTOs.Form.DataOut;
@using System.Web.Mvc.Html;
@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;
@model FieldSelectDataOut
@{
    string hasValue = Model.HasValue() && !string.IsNullOrEmpty(Model.Value[0]) ? "-hasvalue" : "";
    bool isChapterReadonly = ViewBag.Chapter;
    int fieldSetCounter = ViewBag.FieldSetCounter;
    string fieldSetId = ViewBag.FieldSetId;
    string value = Model.GetSelectedValue();
}
<fieldset id="@fieldSetId-@fieldSetCounter-@Model.Id-1" data-dependables="@Model.IsVisible" class="form-element form-select field-set-content" @Html.Raw(Model.Visibility) @Html.Raw(Model.IsRequiredDataAttr)>
    <div class="field-group">
        <div for="sel-@Model.Id" class="filter-label form-label-size d-inline-block">
            @Html.Raw(Model.FullLabel)
        </div>
        <div class="repetitive-field filter-input d-inline-block arrow-select">
            @AddSelect(fieldSetCounter, fieldSetId, hasValue, Model.IsReadonly || isChapterReadonly || value.IsSpecialValue())
        </div>
        @Html.Partial("~/Views/Form/Custom/FieldButtonGroup.cshtml", Model, new System.Web.Mvc.ViewDataDictionary(ViewData) { { "repetitiveValue", value } })
    </div>
    @Html.Partial("~/Views/Form/FormFieldDescription.cshtml", Model)
</fieldset>

<script>
    $(document).ready(function () {
        fieldSetIdentificator = @fieldSetCounter;
        @foreach (FormFieldDependableDataOut ffd in @Model.Dependables)
        {
            <text>
            if ($(`select[name="@fieldSetId-${fieldSetIdentificator}-@Model.Id-1"]`).val() === '@ffd.Condition') {
                @ShowDependables(ffd, fieldSetId)
                $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).show();
            }
            </text>
        }
    })
    $(document).on("change", 'select[name^="@fieldSetId-"][name*="@Model.Id"]', function () {
        fieldSetIdentificator = $(this).attr("name").split('-')[1];

        @foreach (FormFieldDependableDataOut ffd in @Model.Dependables)
        {
            <text>
            if ($(this).val() === '@ffd.Condition') {
                @ShowDependables(ffd, fieldSetId)
                $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).show();
                @SetDependentFieldToDefaultCall(fieldSetId, ffd.ActionParams, showDependables: true)
            } else {
                @HideDependables(ffd, fieldSetId)
                $(`#@fieldSetId-${fieldSetIdentificator}-@ffd.ActionParams-1`).hide();
                @SetDependentFieldToDefaultCall(fieldSetId, ffd.ActionParams)
            }
            </text>
        }
    });

@helper ShowDependables(FormFieldDependableDataOut ffd, string fieldSetId)
{

    foreach (FormFieldDependableDataOut ffddo in ffd.Dependables)
    {
        if (ffd.Dependables != null && ffd.Dependables.Count() > 0)
        {
            <text>
            if ($(`#@ffd.ActionParams-${fieldSetIdentificator}-@ffddo.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).is(':checked')) {
                $(`#@fieldSetId-${fieldSetIdentificator}-@ffddo.ActionParams-1`).show();
                @SetDependentFieldToDefaultCall(fieldSetId, ffddo.ActionParams, showDependables: true)
            }
            </text>
            @ShowDependables(ffddo, fieldSetId)
        }
    }
}


@helper HideDependables(FormFieldDependableDataOut ffd, string fieldSetId)
{
    foreach (FormFieldDependableDataOut ffddo in ffd.Dependables)
    {
        if (ffd.Dependables != null && ffd.Dependables.Count() > 0)
        {
            <text>
            $(`#@fieldSetId-${fieldSetIdentificator}-@ffddo.ActionParams-1`).hide();
            $(`#@ffd.ActionParams-${fieldSetIdentificator}-@ffddo.Condition.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()`).prop('checked', false);
            @SetDependentFieldToDefaultCall(fieldSetId, ffddo.ActionParams)
            </text>
            @HideDependables(ffddo, fieldSetId)
        }
    }
}

@helper AddSelect(int fieldSetCounter, string fieldSetId, string hasValue,bool isDisabled)
{
    bool fieldHasValue = Model.HasValue();
    <select
            id="sel-@fieldSetCounter-@Model.Id"
            name="@fieldSetId-@fieldSetCounter-@Model.Id-1"
            class="form-element-field  @hasValue"
            value="@(fieldHasValue ? Model.GetValue() : string.Empty)"
           @Html.Disabled(isDisabled)
           @Html.Raw(Model.ValidationAttr)
    >
           <option value="" class="form-select-placeholder" @(fieldHasValue && string.IsNullOrEmpty(Model.Value[0]) ? "disabled selected" : string.Empty) data-itemtype="fieldvalue"></option>
           @foreach (FormFieldValueDataOut ffv in Model.Values)
           {
                <option
                 value="@ffv.Value"
                  title="@ffv.Label"
                @(fieldHasValue && !string.IsNullOrEmpty(Model.Value[0]) && Model.Value[0].Contains(ffv.Value) ? "selected" : string.Empty)
                @ffv.GetDataAttr()
                data-valuetype="option"
                data-itemtype="fieldvalue"
            >@ffv.GetShortValue()</option>
           }
    </select>

    if (isDisabled)
    {
        <input type="hidden" id="sel-@Model.Id" name="@fieldSetId-@fieldSetCounter-@Model.Id-1" class="form-element-field @hasValue" value="@(fieldHasValue ? Model.GetValue() : string.Empty)">
    }
}
</script>

@*
    ---------------------------------------------------------------------------------------------------
                                        Temporarily - Hotfix
    ---------------------------------------------------------------------------------------------------
*@

@helper SetDependentFieldToDefaultCall(string fieldSetId, string fieldId, bool showDependables = false)
{
    @: setDependentInputFieldToDefault($(`#@fieldSetId-${fieldSetIdentificator}-@fieldId-1`), @showDependables.ToString().ToLower());
}